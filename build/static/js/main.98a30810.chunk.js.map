{"version":3,"sources":["components/Circle.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["window","sum","Circle","text","click","setState","hide","counter","y","Math","floor","random","innerHeight","x","innerWidth","color","toString","top","left","state","className","style","zIndex","this","onClick","backgroundColor","display","border","length","position","console","log","Component","m","Array","fill","App","map","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOACAA,OAAOC,IAAM,E,IA+DEC,E,kDA5DX,cAAuB,IAAD,EAARC,EAAQ,EAARA,KAAQ,4BAClB,gBA2BJC,MAAQ,WACJJ,OAAOC,KAAO,EACd,EAAKI,SAAS,CACVC,KAAM,OACNC,QAASP,OAAOC,OA9BpB,EAAKO,EAAIC,KAAKC,MAAMD,KAAKE,SAAWX,OAAOY,aAC3C,EAAKC,EAAIJ,KAAKC,MAAMD,KAAKE,SAAWX,OAAOc,YAC3C,EAAKX,KAAOA,EACZ,EAAKY,MAAQ,IAAMN,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBK,SAAS,IACjE,EAAKC,IAAO,EAAKT,EAAI,IAAOR,OAAOY,YAAcZ,OAAOY,YAAc,IAAM,EAAKJ,EACjF,EAAKU,KAAQ,EAAKL,EAAI,IAAOb,OAAOc,WAAad,OAAOc,WAAa,IAAM,EAAKD,EAAI,EACpF,EAAKM,MAAQ,CACTb,KAAM,GACNC,QAASP,OAAOC,KAVF,E,qDActB,c,oBAsBA,WACI,OACI,sBAAKmB,UAAU,SAAf,UACI,6BACI,sBAAKA,UAAU,UAAUC,MAAO,CAAEC,OAAQC,KAAKJ,MAAMZ,SAArD,oBAAwEgB,KAAKJ,MAAMZ,aAEvF,qBAAIa,UAAU,SAASI,QAASD,KAAKnB,MAAOiB,MAAO,CAC/CI,gBAAiBF,KAAKR,MACtBW,QAASH,KAAKJ,MAAMb,KACpBqB,OAA8B,IAAtBJ,KAAKR,MAAMa,OAAe,kBAAoB,GACtDC,SAAU,WACVZ,IAAKM,KAAKN,IACVC,KAAMK,KAAKL,MANf,UASQK,KAAKpB,KAER2B,QAAQC,IAAI/B,OAAOC,e,GAtDnB+B,aCAjBC,EAAI,IAAIC,MADQ,IACWC,KAAK,MAUrBC,MARf,WACE,OACE,mCACGH,EAAEI,KAAI,SAACxB,EAAGyB,GAAJ,OAAU,cAAC,EAAD,CAAgBnC,KAAQmC,EAAI,GAAfA,SCIrBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.98a30810.chunk.js","sourcesContent":["import { Component } from 'react';\r\nwindow.sum = 0;\r\n\r\nclass Circle extends Component {\r\n    constructor({ text }) {\r\n        super();\r\n        this.y = Math.floor(Math.random() * window.innerHeight);\r\n        this.x = Math.floor(Math.random() * window.innerWidth);\r\n        this.text = text;\r\n        this.color = '#' + Math.floor(Math.random() * 16777215).toString(16);\r\n        this.top = (this.y + 200) > window.innerHeight ? window.innerHeight - 200 : this.y;\r\n        this.left = (this.x + 200) > window.innerWidth ? window.innerWidth - 216 : this.x + 5;\r\n        this.state = {\r\n            hide: '',\r\n            counter: window.sum,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        //    setInterval(\r\n        //        () => this.tick(), \r\n        //        1000\r\n        //    );\r\n    }\r\n\r\n    // tick() {\r\n    //     this.setState({\r\n    //         clock: new Date().toLocaleTimeString(),\r\n    //         color: '#' + Math.floor(Math.random()*16777215).toString(16)\r\n    //     });\r\n    // }\r\n\r\n    click = () => {\r\n        window.sum += 1;\r\n        this.setState({\r\n            hide: 'none',\r\n            counter: window.sum,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parent\">\r\n                <h1>\r\n                    <div className=\"counter\" style={{ zIndex: this.state.counter }}>Score: {this.state.counter}</div>\r\n                </h1>\r\n                <h1 className=\"circle\" onClick={this.click} style={{\r\n                    backgroundColor: this.color,\r\n                    display: this.state.hide,\r\n                    border: this.color.length === 6 ? '1px solid black' : '',\r\n                    position: 'absolute',\r\n                    top: this.top,\r\n                    left: this.left\r\n                }}>\r\n                    {\r\n                        this.text\r\n                    }\r\n                    {console.log(window.sum)}\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Circle;","import Circle from './components/Circle';\r\n\r\nconst circleCount = 10\r\nlet m = new Array(circleCount).fill(null);\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      {m.map((x, i) => <Circle key={i} text = {i + 1} />)}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}